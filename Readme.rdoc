= Phone
Parsing, validating and creating croatian phone numbers

== Install
You can install the phone library as a gem
    gem sources -a http://gemcutter.org
    gem install phone

Or as a Rails plugin
    script/plugin install git://github.com/carr/phone.git

== Initializing
    Phone.new('5125486', '91', '385')
or
    Phone.new(:number => '5125486', :area_code => '91', :country_code => '385')

== Parsing
    Phone.parse '+385915125486'
    Phone.parse '00385915125486'

You must set the country code, otherwise it doesn't work:
    Phone.parse '091/512-5486', :country_code => '385'
    Phone.parse '(091) 512 5486', :country_code => '385'
    
If you feel that it's tedious, set the default country code once (in your config/environment.rb):
    Phone.default_country_code = '385'    
    Phone.parse '091/512-5486'
    Phone.parse '(091) 512 5486'    
    
Same goes for the area code:
    Phone.parse '451-588', :country_code => '385', :area_code => '47'
or
    Phone.default_country_code = '385'  
    Phone.default_area_code = '47'
    
    Phone.parse '451-588'

== Validating
Validating is very relaxed, basically it strips out everything that's not a number or '+' character:
    Phone.valid? 'blabla 091/512-5486 blabla'
    
== Formatting
Options for the format() method include:

* %c - country_code (385)
* %a - area_code (91)
* %A - area_code with leading zero (091)
* %n - number (5125486)
* %n1 - first @@n1_length characters of number (configured through Phone.n1_length), default is 3 (512)
* %n2 - last characters of number (5486)

    pn = Phone.parse('+385915125486')
    pn.to_s # => "+385915125486"
    pn.format("%A/%f-%l") # => "091/512-5486"
    pn.format("+ %c (%a) %n") # => "+ 385 (91) 5125486"
    
== TODO
* support for other countries, detecting the country from the input string
* manually entering parse format, using regexps for different phone parts:
    :area_code => regexp, :country_code => regexp
* output format names, like so:
    pn.format(:short)
    pn.format(:long)
    
= Author
Copyright Â© 2010 Tomislav Car, Infinum
